pbs command
	setup: 
	wizard:
	colors
	statistics

build system
	warp

	pbsfile
		statistics:

	post build:
	triggers:

	depend
		configuration
		rules 
			setup
			running

		dependencies
			node

		graph

	check
		digest
		errors

	build
		jobs:
		post build









pbs command
=============
--v|version                                      : Displays Pbs version.
--l|create_log                                   : PBS will creat a simple log for the current run.
log
--ll|display_last_log=s                          : PBS dump the last log in the given build directory.
log_display_last

--h|help                                         : Displays this help.
--help_switch=s                               : Displays help for the given switch.
--help_narrow_display                        : Writes the flag name and its explanation on separate lines.

--p|pbsfile=s                                    : Pbsfile use to defines the build.
--debug:s                                        : Enable debug support A startup file defining breakpoints can be given.

--prf|pbs_response_file=s                        : File containing switch definitions and targets.
--naprf|no_anonymous_pbs_response_file           : Use only a response file named after the user or the one given on the command line.
prf_no_anonymous
--nprf|no_pbs_response_file                      : Don't use any response file.
prf_none

--verbosity=s  **remove**                        *: Used in user defined modules.

--generate_bash_completion_script                : Output a bash completion script and exits.
bash_completion_generate_scrip


--output_indentation=s      **remove **          : set the text used to indent the output. This is repeated "subpbs level" times.
--nh|no_header                                   : PBS won't display the steps it is at. (Depend, Check, Build).
! misnamed, only place it is used is when depending files, get a spinner while loading pbsfile rather than, indented, multiple lines 
usefull when using --display_pbsuse which could set it automatically

pbsfiles contents:
------------------
--d|display_pod_documenation:s                   : Interactive PBS documentation display and search.
help_interactive

--pp|pbsfile_pod                                *: Displays a user defined help. See 'Online help' in pbs.pod
help_user_from_pbsfile
--pbs2pod                                       *: Extracts the pod contained in the Pbsfile (except user documentation POD).
help_build_system_from_pbsfile
--raw_pod                                        : -pbsfile_pod or -pbs2pod is dumped in raw pod format.
help_raw_pod_format


setup: 
------
--nub|no_user_build  **remove **                 : User defined Build() is ignored if present.
user_build_none

--no_default_path_warning                        : will not display a warning when using the distribution's PBS lib and plugins.

--plp|pbs_lib_path=s                             : Path to the pbs libs. Multiple directories can be given
lib_path
--display_pbs_lib_path                           : Displays PBS lib paths (for the current project) and exits.

--ppp|pbs_plugin_path=s                          : Path to the pbs plugins.
plugin_path
--display_pbs_plugin_path                        : Displays PBS plugin paths (for the current project) and exits.
plugin_path_display
--dpli|display_plugin_load_info                  : displays which plugins are loaded.
plugin_display_load_info
--display_plugin_runs                            : displays which plugins subs are run.
plugin_display_run

build system
============

warp:
-----
--warp=s                                         : specify which warp to use.
--no_warp                                        : no warp will be used.
--dwfn|display_warp_file_name                    : Display the name of the warp file on creation or use.
--display_warp_time                              : Display the time spend in warp creation or use.
--dwt|display_warp_tree                          : Display the warp tree. Nodes to rebuild have a '*' prepended and are displayed in the error color.
--dwbs|display_warp_build_sequence               : Display the warp build sequence.
--dww|display_warp_generated_warnings            : When doing a warp build, linking info and local rule match info are disable. this switch re-enables them.
--display_warp_checked_nodes                     : Display which nodes are contained in the warp tree.
--display_warp_triggered_nodes                   : Display which nodes are removed from the warp tree and why.

pbsfile :
--------
--dpr|display_pbs_run                            : Display the run level of PBS.

--display_subpbs_search_info                     : Display information about how the subpbs files are found.
--display_all_subpbs_alternatives                : Display all the subpbs files that could match.
--dpos|display_original_pbsfile_source           : Display original Pbsfile source.
--dps|display_pbsfile_source                     : Display Modified Pbsfile source.
--dpc|display_pbs_configuration=s                : Display the configuration (switches) for the the package being processed by PBS.
--dec|display_error_context                      : When set and if an error occures in a Pbsfile, PBS will display the error line.
--dpl|display_pbsfile_loading                    : Display which pbsfile is loaded as well as its runtime package.
--dspd|display_sub_pbs_definition                : Display sub pbs definition.
--dsi|display_subpbs_info                        : Display a message when depending a node in a subpbs.

--sfi|subpbs_file_info                           : PBS displays the sub pbs file name.
--nsi|no_subpbs_info                             : Dependency information will be displayed on the same line for all depend.

statistics:
--dpt|display_pbs_time                           : Display where time is spend in PBS.
pbs_display_time

--dptt|display_pbs_total_time                    : Display How much time is spend in PBS.
pbs_displaytotal_time

--dpu|display_pbsuse                             : displays which pbs module is loaded by a 'PbsUse'.
--dpuv|display_pbsuse_verbose                    : displays which pbs module is loaded by a 'PbsUse' (full path) and where the the PbsUse call was made.
--dput|display_pbsuse_time                       : displays the time spend in 'PbsUse' for each pbsfile.
--dputa|display_pbsuse_time_all                  : displays the time spend in each pbsuse.
--dpus|display_pbsuse_statistic                  : displays 'PbsUse' statistic.


rules setup
-----------
--durno|display_used_rules_name_only             : Display the names of the rules used during the dependency pass.
--dar|display_all_rules                         *: Display all the registred rules.
--rule_namespace=s                               : Rule name space to be used by DefaultBuild()

--dr|display_rules                               : (DF) Display which rules are registred. and which rule packages are queried.
--drd|display_rule_definition                    : (DF) Display the definition of each registrated rule.
--display_simplified_rule_transformation         : Display debugging data about simplified rule transformation to pure perl rule.

--dtr|display_trigger_rules                      : (DF) Display which triggers are registred. and which trigger packages are queried.
--dtrd|display_trigger_rule_definition           : (DF) Display the definition of each registrated trigger.

post build:
--dpbcr|display_post_build_commands_registration : (DF) Display the registration of post build commands.
--dpbcd|display_post_build_command_definition    : (DF) Display the definition of post build commands when they are registered.
--dpbc|display_post_build_commands               : (DF) Display which post build command will be run for a node.
--dpbcre|display_post_build_result               : Display the result code and message returned buy post build commands.


triggers:
--dtin|display_trigger_inserted_nodes            : (DF) Display the nodes inserted because of a trigger.
--dt|display_trigged                             : (DF) Display the files that need to be rebuild and why they need so.


configuration
-------------
--u|user_option=s                                : options to be passed to the Build sub.
--D=s                                            : Command line definitions.

--config_namespace=s                             : Configuration name space to be used by DefaultBuild()
--save_config=s                                 *: PBS will save the config, used in each PBS run, in the build directory
--load_config=s                                 *: PBS will load the given config before running the Pbsfile.
--dc|display_config                              : Display the config used during a Pbs run (simplified and from the used config namespaces only).
--dcs|display_config_start                       : Display the config to be used in a Pbs run before loading the Pbsfile
--display_config_delta                           : Display the delta between the parent config and the config after the Pbsfile is run.
--dcn|display_config_namespaces                  : Display the config namespaces used during a Pbs run (even unused config namspaces).
--dac|display_all_configs                        : (DF). Display all configurations.
--dam|display_configs_merge                      : (DF). Display how configurations are merged.
--display_package_configuration                  : If PACKAGE_CONFIGURATION for a subpbs exists, it will be displayed if this option is set (also displayed when --dc is set)
--no_silent_override                             : Makes all SILENT_OVERRIDE configuration visible.


rule running
------------
--allow_virtual_to_match_directory               : PBS won't display any warning if a virtual node matches a directory name.
--dur|display_used_rules                         : Display the rules used during the dependency pass.
--ntii|no_trigger_import_info                    : PBS won't display which triggers are imported in a package.

dependencies
------------
--sd|source_directory=s                         *: Directory where source files can be found. Can be used multiple times.
--dsd|display_source_directory                   : display all the source directories (given through the -sd switch ot the Pebsfile).

--dde|display_depend_end                         : Display when a depend ends.
--ndi|no_duplicate_info                          : PBS won't display which dependency are duplicated for a node.
--no_external_link                               : Dependencies Linking from other Pbsfile stops the build if any local rule can match.
--nli|no_link_info                               : PBS won't display which dependency node are linked instead of generated.
--nlmi|no_local_match_info                       : PBS won't display a warning message if a linked node matches local rules.

--dd|display_dependencies                        : (DF) Display the dependencies for each file processed.
--ddl|display_dependencies_long                  : (DF) Display one dependency perl line.
--ddt|display_dependency_time                    :  Display the time spend in each Pbsfile.
--dct|display_check_time                         :  Display the time spend checking the dependency tree.
--dcdi|display_c_dependency_info                 : Display information while depending C files.
--scd|show_c_depending                          *: PBS will show which C files dependency are build.
--dre|dependency_result                          : Display the result of each dependency step.
--ncd|no_c_dependencies                          : completely ignore c dependencies.
--dcd|display_c_dependencies                     : Display the dependencies that are newer than a c file.
--display_cpp_output                             : Display the command and output of the program generating dependencies.
--ddr|display_dependencies_regex=s               : Define the regex used to qualify a dependency for display.
--dnsr|display_node_subs_run                     : Show when a node sub is run.
--ddrd|display_dependency_rule_definition        : Display the definition of the rule that generates a dependency.
--display_dependency_regex                       : (DF) Display the regex used to depend a node.

node:
--o|origin                                      *: PBS will also display the origin of rules in addition to their names.
node_display_origin
--a|ancestors=s                                  : (DF) Display the ancestors of a file and the rules that inserted them.
node_display_ancestor
--display_search_info                           *: Display the files searched in the source directories. See --daa.
node_display_locate_info
--daa|display_all_alternates                    *: Display all the files found in the source directories.
node_display_locate_info_all

--ni|node_information=s                          : Display information about the node matching the given regex before the build.

--nbn|node_build_name                            : Display the build name in addition to the logical node name.
--no|node_origin                                 : Display where the node has been inserted in the dependency tree.
--nd|node_dependencies                           : Display the dependencies for a node.
--nc|node_build_cause                            : Display why a node is to be build.
--nr|node_build_rule                             : Display the rules used to depend a node (rule defining a builder ar tagged with [B].
--nb|node_builder                                : Display the rule which defined the Builder and which command is being run.
--nconf|node_config                              : Display the config used to build a node.
--npbc|node_build_post_build_commands            : Display the post build commands for each node.
--nil|node_information_located                   : Display node information located in addition to relative node name.

check
-----
digest:
--display_digest_exclusion                       : Display when an exclusion or inclusion rule for a node matches.
--display_digest                                 : Display the expected and the actual digest for each node.
--dddo|display_different_digest_only             : Only display when a digest are diffrent.
--display_md5_statistic                          : displays 'MD5' statistic.

--use_watch_server                               : Uses file watch server to speed up file verification.
--watch_server_double_check_with_md5             : As use_watch_server but also does and md5 verification.
--watch_server_verbose                           : Will display what files the server has been notfied for.

errors:
--display_cyclic_tree                            : (DF) Display the portion of the dependency tree that is cyclic
--no_source_cyclic_warning                       : No warning is displayed if a cycle involving source files is found.
--die_source_cyclic_warning                      : Die if a cycle involving source files is found (default is warn).

build
-----
builders:
--dbi|display_builder_info                       : Displays if a node is build by a perl sub or shell commands.
--time_builders                                  : Displays the total time a builders took to run.
--kpbb|keep_pbs_build_buffers                   *: PBS will not remove the output buffers generated by build processes.
--display_shell_info                             : Displays which shell executes a command.

jobs:
--j|jobs=i                                       : Maximum number of commands run in parallel.
--jdoe|jobs_die_on_errors=i                      : 0 (default) finish running jobs. 1 die immediatly. 2 build as much as possible.
--ubs|use_build_server=s                        *: If set, Pbs will connect to a build server for all the nodes that use shell commands to build
 this expects the address of the build server. ex : localhost:12_000 
--distribute=s                                  *: Define where to distribute the build.
--dji|display_jobs_info                          : PBS will display extra information about the parallel build.
--djr|display_jobs_running                       : PBS will display which nodes are under build.

--no_build                                       : Cancel the build pass. Only the dependency and check passes are run.
--fb|force_build                                 : Debug flags cancel the build pass, this flag re-enables the build pass.
build_force
--build_directory=s                              : Directory where the build is to be done.
--mandatory_build_directory                      : PBS will not run unless a build directory is given.

--check_dependencies_at_build_time               : Skipps the node build if no dependencies have changed or where rebuild to the same state.
--ns|no_stop                                     : Continues building even if a node couldn't be buid. You might want to use --bi instead.
--sc|silent_commands                             : shell commands are not echoed to the console.
--sco|silent_commands_output                     : shell commands output are not displayed, except if an error occures.


--dbsi|display_build_sequencer_info              : Display information about which node is build.
--dbs|display_build_sequence                     : (DF) Dumps the build sequence data.
--dbsno|display_build_sequence_name_only         : (DF) Displays the node_names for the build sequence.
--evaluate_shell_command_verbose                 : Will display the transformation this plugin does.
--bre|build_result                               : Shows the result returned by the builder.

--bi|build_info=s                                : Options: --b --d --bc --br. A file or '*' can be specified. No Builds are done.
--bni|build_and_display_node_information        *: Display information about the node to be build.

--nbh|no_build_header                            : Don't display the name of the node to be build.
--dpb|display_progress_bar                       : Force silent build mode and displays a progress bar. This is Pbs default, see --ndpb.
--ndpb|display_no_progress_bar                   : Force verbose build mode and displays a progress bar.



post build
----------
--post_pbs=s                                     : Run the given perl script after pbs. Usefull to generate reports, etc.

graph
-----
--dump                                           : Dump an evaluable tree.

--dm|dump_maxdepth=i                             : Maximum depth of the structures displayed by pbs.
--di|dump_indentation=i                          : Data dump indent style (0-1-2).

--fr|files_from_repository                       : Show all the files not located in the default source directory.
--files                                          : Show all the files in the dependency tree and their final location.
--fe|files_extra                                 : Debug flag. Display the dependency tree of all the files in the dependency tree.

--tt|text_tree:s                                 : (DF) Display the dependency tree using a text dumper. A string argument can be given to point at a specific node.
--ttf|text_tree_filter=s                         : (DF) List the fields that are to be displayed when -tt is active. The switch can be used multiple times.
--tta|text_tree_use_ascii                        : Use ASCII characters instead for Ansi escape codes to draw the tree.
--ttdhtml|text_tree_use_dhtml=s                  : Generate a dhtml dump of the tree in the specified file.
--ttm|text_tree_max_depth=i                      : Limit the depth of the dumped tree.
--tno|tree_name_only                             : (DF) Display the name of the nodes only.
--tda|tree_depended_at                           : (DF) Display which Pbsfile was used to depend each node.
--tia|tree_inserted_at                           : (DF) Display where the node was inserted.
--tnd|tree_display_no_dependencies               : (DF) Don't show child nodes data.
--tad|tree_display_all_data                      : Unset data within the tree are normally not displayed. This switch forces the display of all data.
--tnb|tree_name_build                            : (DF) Display the build name of the nodes. Must be used with --tno
--tnt|tree_node_triggered                        : (DF) Display if the node must be rebuild by append a star if it does.
--tntr|tree_node_triggered_reason                : (DF) Display why a node is to be rebuild.
--gtg|generate_tree_graph=s                      : Generate a graph for the dependency tree. A string argument defining the file name must be given.
--tnonh                                          : Do not display header files in the tree dump.
--tnonr=s                                        : removes files matching the passed regex from the tree dump.

--gtg_p|generate_tree_graph_package=s            : As generate_tree_graph but groups the node by definition package.
--gtg_canonical                                  : Generates a canonical dot file.
--gtg_html=s                                     : Generates a set of html files describing the build tree.
--gtg_html_frame                                 : The use a frame in the graph html.
--gtg_snapshot|gtg_snapshots=s                   : Generates a serie of snapshots from the build.
--gtg_cn=s                                       : The node given as argument and its dependencies will be displayed as a single unit. Multiple gtg_cn allowed.
--gtg_sd|generate_tree_graph_source_directories  : As generate_tree_graph but groups the node by source directories, uncompatible with --generate_tree_graph_package.
--gtg_exclude|generate_tree_graph_exclude=s      : Exclude nodes and their dependenies from the graph.
--gtg_include|generate_tree_graph_include=s     *: Forces nodes and their dependencies back into the graph.
--gtg_bd                                         : The build directory for each node is displayed.
--gtg_rbd                                        : The build directory for the root is displayed.
--gtg_tn                                         : Node inserted by Triggerring are also displayed.
--gtg_config                                     : Configs are also displayed.
--gtg_config_edge                                : Configs are displayed as well as an edge from the nodes using it.
--gtg_pbs_config                                 : Package configs are also displayed.
--gtg_pbs_config_edge                            : Package configs are displayed as well as an edge from the nodes using it.
--gtg_gm|generate_tree_graph_group_mode=i        : Set the grouping mode.0 no grouping, 1 main tree is grouped (default), 2 each tree is grouped.
--gtg_spacing=f                                  : Multiply node spacing with given coefficient.
--gtg_ps                                         : Generate a postscript file instead for png.
--gtg_svg=s                                      : Generate a SVG file.
--gtg_printer|generate_tree_graph_printer        : Non triggerring edges are displayed as dashed lines.


wizard:
-------
--w|wizard:s                                     : Starts a wizard.
--wi|display_wizard_info                         : Shows Informatin about the found wizards.
wizard_display_info
--wh|display_wizard_help                         : Tell the choosen wizards to show help.
wizard_display_help
--qow|query_on_warning                           : When displaying a warning, Pbs will query you for continue or stop.

color:
------
--c|colorize                                    *: Colorize output.
color
--no_colorization                                : Removes colors from output. Usefull when redirecting to a file.
color_none
--ce|color_error=s                               : Set the error color.
no short option

--cw|color_warning=s                             : Set the warning color.
--cw2|color_warning2=s                           : Set the alternate warning color.
--ci|color_info=s                                : Set the information color.
--ci2|color_info2=s                              : Set the alternate information color.
--cu|color_user=s                                : Set the user color.
--cs|color_shell=s                               : Set the shell color.
--cd|color_debug=s                               : Set the debugger color.



