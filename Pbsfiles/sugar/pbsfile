#pbs all -no_build -dd -w 0 -ddnl -display_rule_statistics --display_dependency_time -rro -nli -ddl -display_depend_end -ddr -display_rule_to_order -tno -tnos

AddTargets 'all' ;

Use './sugar' ; use subs qw( MyAddRule Module get_modules) ;

Config
	COMPILER => 'gcc',
	GENERATE_DOC => 1,

	MODULES => 'compiler_1' ;

Rule 'all', ['all' => get_modules(qw(MODULES)), 'runtime', 'compiler_2/compiler_2', 'tests', 'depended_somewhere_else', 'depended'] => BuildOk("Done 'oct'") ;
MyAddRule 'tests', ['tests' => get_tests('MODULES')] ;

SourcesMatch qr/X$/ ;
Rule 'depended', ['depended' => 'X' ] ;

Module '*/compiler_1' => 'compiler/compiler' ;
AddSubpbsRule '*/runtime' => 'runtime/runtime_scoped' ;

# set extra configuration to module
Subpbs 'compiler_2', '*/compiler_2' => 'compiler/compiler', 'compiler_2', DEBUG_DISPLAY_DEPENDENCIES => 1 , DEBUG_DISPLAY_DEPENDENCIES_LONG => 1 ;
#Subpbs '*/compiler_2' => 'compiler/compiler' ;

rule [NA, 'yo'], 'bla' , [

	'cxxc' =>
	1,
	2,
	qw(
a
b
cd)], 'cmd',
'cmd'
 ;
Rule 'all2', ['all' => 'immediate_build'] ;

#demonstrate the use of configuration variables in depender and dependency description
Config IB => 'immediate_build' ;
Config IBE => '.some_extension' ;

Rule [NA], 'immediate_build', ['%IB' => 'dependency%IBE'] 
	=> "echo %COMPILER > %TARGET" ;

# demonstrates NON_ACTIVE and the detection of variables in shell commands, see --dcu
Rule [IMMEDIATE_BUILD], 'immediate_build', ['immediate_build'] 
	=> "echo %COMPILER > %TARGET" ;

# demonstrates the detection of variables in shell commands at build time, see --dcu
Rule [NA, IMMEDIATE_BUILD], 'immediate_build', ['immediate_build'] 
	=> sub 
		{
		my ($config, $file_to_build, $dependencies, $triggering_dependencies, $tree, $inserted_nodes) = @_ ;
		
		use PBS::Rules::Builders ;
		
		RunShellCommands
			(
			PBS::Rules::Builders::EvaluateShellCommandForNode
				(
				"echo %COMPILER %CC %CFLAGS %FILE_TO_BUILD > %TARGET",
				"sub builder @" . __FILE__ . ':' . __LINE__,
				$tree,
				$dependencies,
				$triggering_dependencies,
				)
			) ;
		} ;
